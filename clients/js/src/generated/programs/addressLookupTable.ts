/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { getU32Encoder } from '@solana/codecs-numbers';
import { Program } from '@solana/programs';
import { memcmp } from '../shared';

export const ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS =
  'AddressLookupTab1e1111111111111111111111111' as Address<'AddressLookupTab1e1111111111111111111111111'>;

export type AddressLookupTableProgram =
  Program<'AddressLookupTab1e1111111111111111111111111'>;

export function getAddressLookupTableProgram(): AddressLookupTableProgram {
  return {
    name: 'addressLookupTable',
    address: ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS,
  };
}

export enum AddressLookupTableAccount {
  AddressLookupTable,
}

export function identifyAddressLookupTableAccount(
  account: { data: Uint8Array } | Uint8Array
): AddressLookupTableAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (memcmp(data, getU32Encoder().encode(1), 0)) {
    return AddressLookupTableAccount.AddressLookupTable;
  }
  throw new Error(
    'The provided account could not be identified as a addressLookupTable account.'
  );
}

export enum AddressLookupTableInstruction {
  CreateLookupTable,
  FreezeLookupTable,
  ExtendLookupTable,
  DeactivateLookupTable,
  CloseLookupTable,
}

export function identifyAddressLookupTableInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): AddressLookupTableInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, getU32Encoder().encode(0), 0)) {
    return AddressLookupTableInstruction.CreateLookupTable;
  }
  if (memcmp(data, getU32Encoder().encode(1), 0)) {
    return AddressLookupTableInstruction.FreezeLookupTable;
  }
  if (memcmp(data, getU32Encoder().encode(2), 0)) {
    return AddressLookupTableInstruction.ExtendLookupTable;
  }
  if (memcmp(data, getU32Encoder().encode(3), 0)) {
    return AddressLookupTableInstruction.DeactivateLookupTable;
  }
  if (memcmp(data, getU32Encoder().encode(4), 0)) {
    return AddressLookupTableInstruction.CloseLookupTable;
  }
  throw new Error(
    'The provided instruction could not be identified as a addressLookupTable instruction.'
  );
}
